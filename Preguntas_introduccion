1- Define "Ciclo de vida del software".
	El ciclo de vida del desarrollo Software (SDLC en sus siglas inglesas), es una secuencia estructurada y bien definida de las etapas en Ingeniería de software para desarrollar el producto sofware deseado.

2- Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas.
	1-Analisis de requerimientos: Se extraen los requisitos del producto de software.
	2-Especificacion: Describir el comportamiento esperado del software y su interaccion con los usuarios y/o otros sistemas.
	3-Diseño y arquitectura: Consiste en el diseño de los componentes del sistema que dan respuesta a las funcionalidades descritas en la segunda etapa también conocidas como las entidades de negocio. Generalmente se realiza en base a diagramas que permitan describir las interacciones entre las entidades y su secuenciado.
	4-Programacion: Se traduce el diseño a código.
	5-Prueba: Comprobar que el software responde/realice correctamente las pruebas indicadas en la especificacion.
	6-Documentacion: Realizacion del manual de usuario.
	7-Mantenimiento: Realizacion de un mantenimiento correctivo y un mantenimiento evolutivo.

3-Explica brevemente en qué consiste el modelo en cascada cuando hablamos de desarrollo de software.

El modelo en cascada es el enfoque metodológico que ordena rigurosamente las etapas del proceso para el desarrollo de software, de tal forma que el inicio de cada etapa debe esperar a la finalización de la etapa anterior.


4-Ventajas e inconvenientes del modelo en cascada.
	-Ventajas:
	 *Comenzar con el software con bastante rapidez.
	 *Estimar calendarios y presupuestos con mayor precision.
	 *Lograr un nivel de satisfaccion del cliente mas elevado que otros enfoques.

	-Desventajas:
	 *Alterar el diseño del proyecto en cualquier etapa es muy complicado
	 *Una vez que una fase se ha completado, es casi imposible de realizar cambio.
	 *Resulta muy difícil responder a los problemas que puedan surgir, ya que tanto la retroalimentación, como las pruebas se retrasan hasta estadios muy tardíos del desarrollo de proyecto.
	 *Solucionar cualquier cuestión que se plantee requiere una cantidad sustancial de tiempo, esfuerzo y dinero.

5-¿Qué se entiende por verificación? ¿Y por validación?

	Verificacion: Comprobar que el software esta de acuerdo con su especificacion. Se comprueba que el sistema cumple los requerimientos funcionales y no funcionales que se le han especificado.

	Validacion: Se asegura que el software cumple las espectativas del cliente.

6- Explica como funciona el modelo de desarrollo mediante creación de prototipos.

El modelo de prototipos pertenece a los modelos de desarrollo evolutivo. El prototipo debe ser construido en poco tiempo, usando los programas adecuados y no se debe utilizar muchos recursos. El diseño rapido se centra en una representacion de aquellos aspectos del software que seran visibles para el cliente o el usuario final

7-Explica como funciona el modelo espiral cuando se aplica al desarrollo orientado a objetos.

En el modelo espiral, el software se desarrolla en una serie de versiones incrementales. Durante las primeras iteracciones, la version incremental podría ser un modelo en papel o un prototipo. Durante las últimas iteraciones, se producen versiones cada vez más completas del sistema diseñado. 

8-¿Qué cuatro principios rigen el desarrollo ágil expresados en el Manifiesto Ágil?
	
	1-Los individuos y sus interacciones
	2-Entregar software que funciona
	3-Colaborar con el cliente
	4-Responder al cambio

9-¿Qué es una historia de usuario?

Una historia de usuario es una representación de un requisito escrito en una o dos frases utilizando el lenguaje común del usuario. Las historias de usuario son utilizadas en las metodologías de desarrollo ágiles para la especificación de requisitos (acompañadas de las discusiones con los usuarios y las pruebas de validación). Cada historia de usuario debe ser limitada, ésta debería poderse escribir sobre una nota adhesiva pequeña. Dentro de la metodología XP las historias de usuario deben ser escritas por los usuarios. 

10-Haz un resumen sobre que se entiende por Lean software y qué principios lo rigen.

Es un modelo de gestión enfocado en la creación de flujo para poder entregar el máximo valor a los clientes. Para ello, utiliza la mínima cantidad de recursos, es decir, los necesarios.
La creación de flujo se focaliza en la reducción de los ocho tipos de "desperdicios" en productos manufacturados:
    1-Sobreproducción.
    2-Tiempo de espera.
    3-Transporte.
    4-Exceso de procedimientos.
    5-Inventario.
    6-Movimientos.
    7-Defectos.
    8-No utilizar la creatividad de la gente.

Sus principios son:
	1-Eliminar los desperdicios
	2-Amplificar el aprendizaje
	3-Decidir lo mas tarde posible
	4-Entregar tan rapido como sea posible
	5-Capacitar al equipo
	6-Construir integridad intrinseca

11-KANBAN. Estudia las ventajas e inconvenientes de tener una pizarra web digital para la metodología Kanban.
	
	*Ventajas: Es la unica manera de usar esta metodologia para equipos que tengan trabajadores en remoto ya que una pizarra fisica seria imposible. La pizzara web les permite mas herramientas de colaboracion como e-mails, acceso a tiempo real para trabajadores en remoto y les permite a los "stakeholders" o parte interesada de la empresa de saber como va el proyecto a tiempo real, un mayor detalle de cada tarjeta que en una fisica no seria posible, mayor velocidad al generar tarjetas y la capacidad de poder integrarlo con otros sistemas empresariales.

	*Desventajas: No es tan visual como una pizarra fisica en la que puedes modificar o mover una tarjeta rapidamente de lugar. En las fisicas puedes hacer pequeños dibujos o notas que te pueden ayudar visualmente.

12-KANBAN. Haz un resumen de la metodología Kanban e indica sus diferencias frente a SCRUM. 

La metodologia kanban( en japones "tarjetas visuales") consiste mayormente en un tablero o pizarra dividida en 3 columnas(To-Do, In progress, Complete) que nos permite una referencia visual del trabajo que tenemos por delante. Al poder dividir el trabajo en pequeñas tarjetas e ir moviendolas por cada una de las columnas nos permite una mayor eficiencia en el trabajo y mayor agilidad.

Se diferencian en:
    1-Scrum prescribe unos roles concretos. En Kanban se pueden definir roles o no.
    2-Scrum prescribe equipos multifuncionales. En Kanban los equipos pueden ser multifuncionales o especializados.
    3-Scrum prescribe reuniones concretas de tiempo fijo. En Kanban no existen reuniones prefijadas.
    4-Scrum prescribe la estimación y la velocidad.
    5-Scrum prescribe iteraciones de tiempo fijo (Sprint). Kanban no trabaja el concepto de iteración.
        Scrum limita el trabajo en curso por iteración. Kanban limita el WIP por el estado del trabajo en el flujo del proceso.
        Scrum se resiste a cambios de alcance durante la iteración. Kanban admite cambios siempre que haya capacidad disponible para abordarlos.
        Scrum limpia su tablero en cada iteración, usa un tablero diferente en cada iteración. En Kanban no es necesario, su tablero es persistente.
        En Scrum las funcionalidades se dividen en partes que puedan completarse en un sprint. Kanban no tiene limitaciones en el tamaño de las divisiones.
        Scrum, prioriza la pila del producto. En Kanban, la priorización es opcional
    6-Scrum establece reuniones diarias centradas en las personas.
    7-Scrum usa diagramas Burndown. Kanban no prescribe diagramas de seguimiento concretos.
    8-En Scrum, el tablero pertenece a un único equipo. En Kanban, varios equipos o personas pueden compartir el mismo tablero.


13-SCRUM. Explica como funciona Scrum.

En Scrum un proyecto se ejecuta en ciclos temporales cortos y de duración fija (iteraciones que normalmente son de 2 semanas, aunque en algunos equipos son de 3 y hasta 4 semanas, límite máximo de feedback de producto real y reflexión). Cada iteración tiene que proporcionar un resultado completo, un incremento de producto final que sea susceptible de ser entregado con el mínimo esfuerzo al cliente cuando lo solicite.


14-SCRUM. Define los siguientes términos:

-Product backlog: La lista de objetivos/requisitos priorizada representa la visión y expectativas del cliente respecto a los objetivos y entregas del producto o proyecto. El cliente es el responsable de crear y gestionar la lista (con la ayuda del Facilitador y del equipo, quien proporciona el coste estimado de completar cada requisito). Dado que reflejar las expectativas del cliente, esta lista permite involucrarle en la dirección de los resultados del producto o proyecto.

-Sprint backlog: Lista de tareas que el equipo elabora en la reunión de planificación de la iteración (Sprint planning) como plan para completar los objetivos/requisitos seleccionados para la iteración y que se compromete a demostrar al cliente al finalizar la iteración, en forma de incremento de producto preparado para ser entregado.
Esta lista permite ver las tareas donde el equipo está teniendo problemas y no avanza, con lo que le permite tomar decisiones al respecto.
Para cada uno de los objetivos/requisitos se muestran sus tareas, el esfuerzo pendiente para finalizarlas y la autoasignación que han hecho los miembros del equipo.

15-SCRUM. En la terminología Scrum qué terminos se utilizan como sinónimo de:

Jefe de proyecto: El jefe de proyecto pasa a ser un facilitador que vela por que se cumpla el proceso de Scrum, quita impedimentos, protege al equipo y facilita las reuniones para que tanto el equipo como el cliente colaboren y se obtengan las máximas sinergias.

Cliente: Es el representante de todos los interesados en el proyecto, con autoridad para tomar decisiones. Define los objetivos del producto o proyecto y dirige los resultados del proyecto maximizando su ROI, para lo cual participa en las reuniones de planificación de iteración y de demostración.

Equipo de desarrollo: Desarrolla el producto y tiene un objetivo común, dado que adquiere un compromiso en cada iteración. Es un equipo autoorganizado y multidisciplinar, idealmente de entre 5 y 9 personas a tiempo completo, en una misma localización física y trabajando en un único proyecto.


16- SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum.

Los requisitos mas importantes son:
	-Cultura de empresa.
	-Compromiso del cliente.
	-COmpromiso de la direccion de la organizacion, formando equipos autogestionados y multidisciplinares.
	-Compromiso conjunto y colaboracion de los miembros del equipo.
	-Relacion entre proveedor y cliente basada en ganar-ganar.
	-Facilidad para realizar cambios en el proyecto.
	-Tamaño de cada equipo entre 5 y 9 personas.
	-Equipo trabajando en un espacio comun.
	-Dedicacion del equipo a tiempo completo.
	-Estabilidad de los miembros del equipo.


17-XP. Explica los 5 valores de la Programación Extrema.

-Comunicacion: La comunicación se realiza por medio de transferencia de conocimientos en reuniones frecuentes cara a cara entre usuarios y desarrolladores, lo que le da a ambos una visión compartida del sistema.

-Simplicidad: En XP se comienza desarrollando las soluciones más sencillas necesarias para solucionar los problemas (requerimientos) que se están viendo en ese momento, añadiendo funcionalidad extra más tarde, en la medida en que se obtiene más información de los requerimientos.

-Feedback: Mostrar al cliente el software frecuentemente escuchando cuidadosamente sus observaciones y realizando cambios.

-Coraje: Decir la verdad en los avances y estimados, no documentare excusas para el fracaso, pues planificamos para tener éxito. No tenrt miedo a nada pues sabemos que nadie trabaja solo. Adaptarse a los cambios cuando sea que estos ocurran.

-Respeto: Todos en el equipo dan y reciben el respeto que merecen como integrantes del equipo y los aportes de cada integrante son valorados valorados por todos. Todos contribuyen, así sea simplemente con entusiasmo. Los desarrolladores respetan la experticia de los clientes y viceversa. Todos en el equipo dan y reciben el respeto que merecen como integrantes del equipo y los aportes de cada integrante son valorados valorados por todos. Todos contribuyen, así sea simplemente con entusiasmo. Los desarrolladores respetan la experticia de los clientes y viceversa.


18-XP. ¿Cuáles son las características distintivas de XP frente a otras metodologías ágiles?

La Programacion externa se caracteriza porque su principal objetivo es la satisfaccion del cliente. Dar al cliente lo que quiere y cuando quiere aunque realice cambios en fases avanzadas del proyecto.